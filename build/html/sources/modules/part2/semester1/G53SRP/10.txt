.. _G53SRP10:

============================
10 - Resource Sharing Issues
============================

Resource Sharing
================

Locking a resource means blocking other threads access to that resource.

Lower priority process locking a resources shared with a higher-priority process delays it. This is an addition source of interference and in the worst case delays high priority processes.

Priority Inversion
==================

If a low priority process holds a lock, and a high priority process is blocked waiting for that lock. A medium priority process can come along and get the lock next since it is still higher than the lower priority process blocking the higher priority process.

Example: Mars Pathfinder
========================

http://research.microsoft.com/en-us/um/people/mbj/mars_pathfinder/mars_pathfinder.html

Priority Inheritance
====================

Dynamically adjusts priority of a process holding a lock:

* Simple priority inheritance
    * Set all processes *currently* waiting for a lock to maximum priority.
    * Prevents priority inversion, limiting the blocking delay.
    * No additional information required
    
* Priority ceiling emulation
    * Set all process that ever acquire lock, to maximum priority.
    * Requires input from teh programmer or program analysis to decide in advance what priority to associate with each lock/resource.
    * It may reduce worst case blocking ...

Priority Inheritance in RTSJ
============================

Simple priority inheritance is required by default. Priority ceiling emulation may also be available.

Priority Inheritance Classes
============================

*...*

Wait-Free Interaction
=====================

An alternative to locks and blocking. Interactions from a (for example high priority) thread fail rather than block. This means that there is no risk of delaying the thread.

For example ``javaz.realtime.WaitFreeReadQueue`` and ``WaitFreeWriteQueue`` will block write/read if the the queue is full.