.. _G53SRP:

============================
13 - Reliability and Failure
============================

Reliability
===========

    "a measure of the success with which the system conforms to some authoritative specification".

From this we can define a definition of a failure:

    "when the behaviour of a system deviates from that which is specified for it".

Safety
======

    "freedom from those conditions that can cause death, injury, occupational illness, damage to (or loss of)  equipment (or property), or environmental harm".
    
It is possible for systems to be reliable but safe, for example a military tank is design specifically to be unsafe to certain agents.

Dependability
=============

    "The dependability of a system is that property of the system which allows reliance to be justifiably places on the service it delivers".

Attributes
**********

Availability
    Readiness for correct service

Reliability
    Continuity of correct service

Safety
    (See above)

Confidentiality
    Absence of unauthorised disclosure of information

Integrity
    Absence of improper system alteration

Maintainability

Impairments
***********

Failures
    "When the behaviour of a system deviates from the which is specified for it" or "deviation from desired or intended state".

Errors
    Internal discrepancy between intended and actual behaviour, caused by a fault

Faults
    A defect in the system...
    
Fault Types
-----------

Transient
    Appears for a time and then disappears, for example electrical interference

Permanent
    Appears at some time and remains, for example software design, broken wire.

Intermittent
    Which recur from time to time, for example heat sensitivity.

Fault Sources
-------------

* Inadequate specification
* Design errors in the software components
* Failures of the physical components
* Interference with communications

Fault Incidence in Software
---------------------------

On average 1 in every 50 lines of production code has a fault in it. That is 20,000 in 1 million lines of code.

Testing removes 90% or 2,000 faults from 1 million lines of code, and the first year's use of the software finds 10% (200) of the original faults.

Maintenance removes those and adds the same number of new bugs (2000 per 1 million lines of code).

Failure Modes
-------------

Value failure
    The value is in error.

Time Failure
    Something happens too early, too late (known as a *performance error*) or infinitely late (known as an *omission failure*).

Some Terms
----------

Fail uncontrolled
    Subject to arbitrary failures

Fail late
    Correct value but may be late

Fail silent
    Only subject to (final) omission failure

Fail stop
    Like *fail silent*, but detected

Fail controlled
    Only in a specified controlled manner

Fail never
    Always correct in value and time

Means
*****

* Fault prevention
* Fault removal
* Fault forecasting
* Fault tolerance

Fault Prevention
----------------

This can be achieved using:

* rigorous (formal?) specifications
* Use proven design methodologies
* Use data abstraction
* Use a modular approach
* Use project support environments

Fault Removal
-------------

To remove a bug we must first identify it, this can be achieved during development:

* Design reviews
* Program verification
* Code inspection
* System testing

or during use:

* Run-time checks
* Logs and audit trails
* Alerts and management interfaces

There are some reservations regarding system testing. It is not exhaustive and cannot show absence of faults. Test conditions may not be realistic and specific errors may not be shown.

Fault Forecasting
----------------

We can predict likely faults so that they can be removed or anticipated and defended against.

Fault Tolerance
---------------

    "the ability to operate correctly in the presence of faults"

However this might involve some degradation of function.

**Full fault** tolerance would mean that everything performs correctly within a limited time. **Graceful 
degradation** provides partial service and **Fail-safe** allows a program to remain safe while halting.

Some faults (and their likelihood) can be anticipated based upon knowledge of the system. For example hardware failure, interference, external system failures.

Other faults are *unanticipated* such as design errors and "real world" problems and are harder to tolerate.

One way to deal with unanticipated errors is redundancy. For example RAID allows hard disks to fail whilst still continuing to work.