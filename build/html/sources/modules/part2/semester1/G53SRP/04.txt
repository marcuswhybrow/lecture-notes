.. _G53MLE04:

==========================
04 - Programming with Time
==========================

The Notation of Time
====================

Transitivity: :math:`\forall x,y,y:(x < y \wedge y < z) \Rightarrow x < z`

Linearity: :math:`\forall x,y:x \not`

Support for Time
================

Code execution can be unpredictable or variable. It is important to have access to the *real world* via an internal clock.

The System Clock
================

The JVM exposes a system clock as follows::
    
    java.lang.System {
        static long currentTimeMillis();
    }

which is also used by ``java.util.Date()`` in order to initialise to the current time.

It returns the number of milliseconds since midnight January 1st 1970 GMT.

It depends on accuracy and granularity of the underlying hardware clock.

What is time for?
=================

On-screen clocks may be presented to the user.

Recording/measuring time of operations, events and messages such as consistency checks in security protocols.

They allow us to do things at a correct time or rate.

They also allow us to **detect errors** using timeouts.

Use of Simple Delays
====================

We might be waiting for a concurrent action to complete in another thread or in the physical world.

We might synchronise with an external time or event, or repeat a task at a specific rate.

External Time vs Local Time
===========================

Only some applications require access to the external calendar type time. Many applications require only relative times in order to function.

Embedded systems may have one or both types of clock.

Busy Waiting Delay
==================

Without support we would have to *busy* wait until the time we needed::

    public class BustDelay {
        public static void main(String[] args) {
            long start = System.currentTImeMillis();
            long delay = 1000;
            while (System.currentTimeMillis() < start + delay);
            
            // execute some code after 1000 milliseconds
        }
    }

Sleep
=====

Instead of busy waiting Java allows a thread to perform a relative delay::

    java.lang.Thread {
        static void sleep(long millis);
    }

Note that the delay is a minimum (explained later).

The JVM can map a request to sleep to the OS which avoids busy waiting and most efficient::

    public class SleepDelay {
        public static void main(String[] args) {
            long delay = 1000;
            try {
                Thread.sleep(delay);
            } catch(InterruptedException ie) {
                // awoken by Thread.interrupt() should ideally check the time is correct.
            }
        }
    }


Absolute Delays
===============

Clock granularity, pre-emption and compute time make exact timing of sleep and code impossible.

The solution is not to wait for a relative amount of time but to wait until the next pre-identified time to wake up.

Timeouts
========

Here are some timeout examples:

``java.lang.Object`` has ``void wait(long delayMs)``

``java.lang.Thread`` has ``void join(long maxDelayMs)``

``java.net.Socket`` has ``void setSoTimeout(int timeout)`` and ``void setSoLinger(boolen on, in linger)``