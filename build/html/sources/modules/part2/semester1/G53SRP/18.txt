.. _G53SRP18:

=========================
18 - Hardware Interfacing
=========================

Buses
=====

A bus is a *common set of electrical connections*. It is a standard interface for:

* Control signals
* Address Signals
* Data signals

It works using a standard protocol:

* Read cycle
* Write cycle
* Interrupt cycle (see notes on device programming)

Device Registers
================

Registers are integrated into the architecture of a device by making them look like normal memory:

* Status registers (read)
* Control registers (write)
* Data buffer registers (read/write)

I/O Instructions
================

Memory mapped:

* The bus is the same physically & logically
* Normal read-write instructions

Separate I/O space

* Separate physical or logical bus
* Dedicated I/O instructions

High Level Language Register Access
===================================

Requires either HLL functions which wrap these low-level operations (For example linux kernel helper routines, or the ``RawMemoryAccess`` class RTJava)

Or it requires an ability to mix High Level Language and assembly language (For example C/C++).

Register Value Manipulation
===========================

The same location may have different functions:

* Setting other bits/registers may determine what register/function it actually has when accessed.
* Reading and writing may have different functions, for example reading a status register vs writing to a completely different control register from/to the same location. This implies you may need to maintain "shadow" control register values in your code since you can only read the status of the device and not the status of the register itself.
* Registers often contain packed binary data, often used to minimise the number of addresses required, or minimise the rounds of communication necessary.
* Requires extensive use of bit-manipulation operations in the driver.

Java Integer Types
==================

==========  ==========
Type        Bits
==========  ==========
byte        8
char        16
short       16
int         32
long        64
==========  ==========

C (default) INteger Types
=========================

==================  ==========
Type                Bits
==================  ==========
unsigned char       8
wchar               16
unsigned short      16
unsigned int        32 (may be 16)
unsigned long       32
unsigned long long  64
==================  ==========

Operators
=========

Languages have unary bit-wise operators, such as ``~ | & ^``.

And also bit-shift operators ``<< >>`` which allow the shifting of bits left or right.

Interrupts
==========

Interrupts are device-initiated (i.e. asynchronous, external events) and are controlled by device control registers (e.g. individually enabled & disabled) and are managed by the CPU (i.e. can be temporarily ignored under program control).

Approaches to Device Control
============================

**Status Driven**

Uses CPU polls

**Interrupt Driven**

i.e. An interrupt from device initiates...

* CPU controlled - All data transfer is performed by the main CPU
* CPU initiated (Direct Memory Access) - Data transfer delegated to a specialised helper unit
* Channel controlled - Data transfer (perhaps also interrupt handling) is delegated to specialised I/O processor called a channel. This is used in mainframes.

Note
====

Interrupts and DMS/channel I/O can result in CPU cycles being "lost" or "stolen" from the main process(es).

* Increases the worst-case execution time(s).
* May make process sets unschedulable
* Thus interrupts are often disabled in safety critical systems, relying instead on guaranteed scheduled polling rates.

High Level Language Support for Interrupts
==========================================

An interrupt handler can call suitable procedures directly. For example a C subroutine address registered as a handler for low-level interrupts. Or there may be some other way to bind a High Level Language process to an interrupt (for example an RTSJ ``AsyncEventHandler`` for an ``AsynEvent`` with an interrupt bound to a hardware interrupt.)

The higher level language must have access to interrupt management operations.

* Inclusion of relevant machine code instructions (e.g. to set/clear interrupt enable bits)
* Or wrapper functions in higher level languages giving access to these (e.g. Linux C helper functions setting or clearing interrupt enable bits)
* Or other language-specific mechanisms (e.g. RTSJ priority-based scheduling of handlers, plus use of Java Synchronisation.)

High-Level Language Facilities
==============================

* Assembly language (low level!!)
* Java (non-RTSJ)
    * cons:
        * No direct access to memory
        * No bit field types
        * No machine-specific I/O instructions
        * No Link to hardware interrupts
        * No access to interrupt management
        * Difficult machine code integration
        * Fixed method prologues/epilogues
        * Unpredictable Garbage Collection
        * Relatively heavy-weight classes/methods
* RTSJ Java
    * Cons:
        * No bit filed types
        * Difficult machine code integration (but it shouldn't need it!)
        * Fixed method prologues/epilogues (but it shouldn't matter!)
        * Relatively heavy-weight classes/methods
    * Pros:
        * Direct access to memory via an API
        * Machine-specific I/O via an API
        * Link to hardware interrupts via asynchronous events
        * Access to interrupt management via scheduling
        * Alternative memory management options to control GC.
* C
    * Con:
        * Lack of classes, Garbage Collection etc.
    * Pros:
        * Supports native pointers
        * Includes bit fields
        * (Relatively) easy inclusion of assembly language
        * C procedure = machine code subroutine
        * Customisable prologue/epilogue