.. _G53SRP03:

=============================
03 - Java Concurrency Control
=============================

Synchronisation Overview
========================

Every Java object has an associated lock. Since every class in Java inherits from Object and Object implements a lock, every class in Java implements the same behaviour.

At most one thread may hold a lock at any one time. This lock is manipulated implicitly using the ``synchronized`` keyword.

If a method is declared ``synchronized`` the calling thread obtains the lock on the entry and releases the lock on exit. This means that at most one thread may be active in a ``synchronized`` method per object. Standard unsynchronised methods are always open.

**Critical sections** are blocks of code which modify a shared state.

You can declare an entire method as a critical section by adding the ``synchronized`` modifier to that method.

It is adds considerably more time to the execution in order to acquire and release the locks on an object.

A ``static synchronized`` method gains a *class lock* and not an *instance lock* which is separate.

The ``synchronized`` keyword is not just a method modifier it can also gain a lock for a block of code::

    synchronized(instance) {
        instance.deposit();
        instance.withdraw();
    }

Object locks are re-entrant, which means a ``synchronized`` method or blocks can call other ``synchronized`` methods on the same object.

Locks are implicitly released when a block or method has completed. This avoids deadlock problems.

Deadlock can occur if two ``synchronized`` methods - one in each instance of a class - invoked by separate threads attempt to gain a lock on the counterpart ``synchronized`` method.

Wait/Notify Overview
====================

Every Java object has a wait queue. Only a thread which holds the lock on an object may manipulate its wait queue. The queue is manipulated using methods defined in ``java.lang.Object``: ``wait()``, ``notify()`` and ``notifyAll()``.

wait()
------

A thread calling ``wait()`` is added to the wait queue (not necessarily the end). It releases the object lock while waiting and re-obtains the object lock before returning.

notify()/notifyAll()
--------------------

A thread calling ``notify()`` wakes one thread in the wait queue. ``notifyAll()`` wakes all threads in the wait queue.

wait(long millis)
-----------------

Whereas ``wait()`` will wait indefinitely unless interrupted ``wait(long millis)`` waits at most ``millis`` milliseconds before attempting to regain the lock and continue.