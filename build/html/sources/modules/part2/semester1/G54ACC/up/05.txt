.. _G54ACCu05:

===============
05 - Connecting
===============

Address Shortages
=================

IPv4 supports 32 but addresses. 96% of these are allocated already (300,00 net-blocks). By current projections, by June 2011 we will have handed out all the global addresses and by Feb 2012 all regional addresses will be gone.

However the number of connected devices is exploding.

IPv6 supports 128 bit addresses, so this will make the address deficiencies go away. Unfortunately the routing protocols need to be updated and all the stuff that was implemented to support IPv4 need to be updated.

NAT
***

Network Address Translation allows for private addressing (RFC 1918) and these private addresses should never be externally routed. They look like 172.16/12, 192.168/16 10/8

Traditional NAT (RFC 3022 and also RFC 2663) use private addresses internally and map those into a small set of routable addresses. Source ports are used to distinguish connections and requires IP and TCP/UDP headers to be rewritten, modifying information such as the address, port and checksums.

Layer Violation
***************

Information leaking from one layer (ISO layers) to another is known as layer violation. Generally it is considered poor form but is sometimes useful for feature or performance.

NAT often causes layer violation to explode and commonly happens when address are abused as host identifiers (they're not, they\re address for routing to interfaces).

Also IP fragmentation, some packet options and some ICMP stuff is made difficult when NAT is involved.

ICE, STUN
*********
Session Traversal Utilities for NAT (RFC 5389). The client attempts to characterise NAT behaviour using a third-part server "on the outside" this is a server which is not behind a NAT device known as a rendezvous server.

Interactive Connectivity Establishment (RFC 5245) commonly used with SIP, SDP (for voice-on-IP) generally *offer/answer* protocols.

Uses STUN to determine and select from a set of *candidate transport addresses*. THe selected addresses are then propagated and used.

Middleboxes
===========

A NAT is an example of a (transparent) middlebox. There are others:

* Firewalls
* Proxies
* Caches

They often provide very useful services but can be a problem due to incomplete protocol support (ICMP). They can also be buggy and unreliable.

End-to-End Argument
*******************

Functions whose implementation requires application involvement should not be provided at lower layers. That is unless partial implementation helps performance (we will revisit this later in the course).

Naming
======

IP addresses are not especially human-readable and not always appropriate granularity (i.e. I don't want to talk to an interface I want to talk to google.com, whatever interface that is on).

**HOSTS.TXT**

A file ``/etc/hosts`` mapping names to numbers was invented to do this. Originally in ARPANET the hosts file was transferred to all the machines on the network via FTP. It was simple but not automatic or scalable.

A scalable version of this was made via distributed hierarchical servers and called Domain Name Service (DNS).

DNS Protocol
************

Domain Name Service (RFC 1034, RFC 1035, RFC 2181)

DNS is a client-server protocol returning a variety of records which commonly uses UDP for queries but may also use TCP, which is most notably used for bulk transfers between servers.

Hierarchy is "baked in". The names-space divides into *zones*. Top Level Domains are usually professionally managed and root servers know now to get everywhere.

There is not a 1:1 mapping between names and numbers since multiple domain names can point to the same IP address.

Name Service
************

TLDs are operated by registrars and delegate sub-domains to other registrars and so down the hierarchy.

Eventually a customer rents a subdomain/name (which means a registrar installs the appropriate records).

Setup primary and secondary servers for subdomains, separate IP netblocks and physical networks.

DNS is a *very* common single-point-of-failure.

Queries
*******

Queries are either *recursive* or *iterative*. A server can either be *authoritative* or *caching* for any given record. To discover the authoritative requires a query to the root, thus the load on root servers is very high.

A caching server works by caching records locally with an expiry time or *soft-state*.

It is possible to acquire a zone's complete set via *zone transfer*. But access to this is often controlled.

Responses
*********

The following record types may be returned for a query:

======= ===================================================================
CNAME   name :math:`\rightarrow` Canonical Name
A       name :math:`\rightarrow` number
PTR     name or number :math:`\rightarrow` name
NS      domain :math:`\rightarrow` authoritative name server
MX      domain :math:`\rightarrow` Mail Exchange
======= ===================================================================

Security
********

DNS is quite insecure.

Cache Poisoning:
    Caching and soft-state timeouts mean bad data propagates and can persist for some time. Even if through a simple mistake.

Man-in-the-middle Attacks:
    Iterative/Recursive queries almost demand this
    
Name spoofing:
    Similar DNS names appear the same to end-users
    
Quality of Service
==================

What do you do when capacity < demand? if capacity > demand there is no need for Qos. The aim is to reducing queuing (latency, jitter and loss).

QoS was basically retrofitted onto the internet and there are two versions:

* Integrated Services (IntServ)

    Allows (on connection setup) to specify that I want no more than say 100ms delay on this packet. It doesn't work on the internet since this requires every router on the way to co-operate. Its also complicated
    
* Differentiated Services (DiffServ)

    Instead of specific values DiffServ defines classes of packets and you can request that your packets be in a specific quality class.

However neither of these are especially widely used. This is because the internet started off with being able to cope with varying changes in latency. For example TCP can deal with a wide range of latencies and still make progress. So essentially the need is not that great.

However it was built into ATM networks, since the whole point of ATM was to provide a quality of service.

IntServ vs DiffServ
*******************

IntServ:

* Operates on explicitly signalled flows
* FLow setup specifies some QoS
* Routers perform Connection Admission COntrol

DiffServ:

* Operates on *traffic aggregates*
* Label packets with desired services class, low latency, low loss, high throughput defined.
* Routers apply queuing as operator sees fit.