.. _G54ACC10:

================================
10 - Abstractions & 3D Evolution
================================

System Design
=============

The art and science of extracting what you can from what you have. This is difficult since goals are often not well-formed (scalability, modularity, extensibility, elegance).

Resources are a multiplicity of:

* Computation
* Storage
* Communications
* Power
* (sometimes people?)

System Constraints
******************

Design

* Bottleneck resource (the most constrained element)
* Scaling (to infinity and beyond)

Resources

* Latency (the speed of light is a hard limit)
* Throughput capacity
* Money

Social Constraints
******************

Standards compliance

* Legal implications

Market conditions

* (Economic) sustainability

Labour availability

* Otherwise nothing gets built

Future proofing

* Times change

Common Techniques
=================

Layering & Tunnelling
*********************

Control complexity by restricting component interactions.

* Simplicity at the cost of performance
* Often benefit from (restricted) layer violation

Need not always be strictly layered

* Protocol heaps [HOTNETS'02]

Extensibility
*************

"Prediction is very difficult, especially about the future" (Niels Bohr). You don't know how things will be used, or in what circumstances.

You must allow for future growth and upgrades:

* "Ships in the night" (each protocol doesn't know of the other) vs integrated operation.
* Tunnelling as a workaround

For example version fields, negotiation or explicit state.

Hierarchy
*********

Recursive decomposition into smaller pieces where each typically depends on a parent.

No single point of control (though potential single point of failure).

*...*

Binding & Indirection
*********************

Need to translate from an abstraction to an instance:

* Computation vs lookup
* Distributed vs centralised control

If well-known, then you could translate (bind) automatically. If so the choice is when: late vs early binding.

For example DNS service lookup.

Combining with multiplexing.

State Management
****************

Soft state:

* Requires refreshing else deleted on timer.
* Increased bandwidth for automatic clean up after failure.

Explicit state:

* Easier to interpret, manage, error-protect

For example link state vs distance vector routing.

Randomisation
*************

A powerful tool for tie-breaking and security. It is used up and down the stack (for example ethernet collisions, nonces, router election etc.)

Damping & Hysteresis
********************

Reducing amplitude vs adding memory>

System state changes based on thresholds so may fluctuate if near a threshold.

Such fluctuations, if rapid, are usually bad:

* Bandwidth overheads
* Reduced performance
* Increased likelihood of inconsistency

Make thresholds *state-dependent*.

For example TCP congestion control/RTT estimation; however BGP flap damping is also problematic.

Operating Timescales
********************

* Not all operations need to be equally fast
* Not all operations have the same granularity, for example once per packet vs once per communication
* Data vs control vs management

For example connection setup, QoS for packets vs flows vs aggregates.

3D Data Network Evolution
=========================

Enhanced Packet Core (EPC) Data Networks
****************************************

THe vision is to provide continuous IP connectivity on resource constrained devices (sincle radio, battery powered) while mobile (geographically at speed, logically between network types, 2G, 3G, WLAN) with detailed *...*

Basic LTE Operation
*******************

Tx:

* UE registers with MME
* Obtains configuration (address, Server GW etc.)
* Network signals bearers (tunnels) to be set up.

Rx:

* MME pages Serv GW for UE
* UE responds, setting up bearers via Serv GW - PDN GW.

A Different Style
*****************

It's the netowrk, stupid! Not the stupid network. Dramatically more complex accounting required.

For example:

* PCRF, OFCS, OCS apply complex connectivity and charging polices
* EIR deny connectivity to stolen devices
* ETWS Earthquake and Tsunami Warning Service, to be replaced by Public Warning Service, to benefit US/EU.

Signal Measurement
******************

eNodeBs (base stations, eNBs) may overlap. Which should I pick and how?

eNB creates idle slots to enable UEs to measure signal strength:

* Only rely on a single radio
* Can't do simultaneous Rx and Tx
* Can't be simultaneously on different RANs

UR switches as desired.

Idle Mode
*********

UE can go into idle mode to save power:

* Less background transmission to network
* However the network need to track your location in order to deliver incoming packets

Requires support for paging by MME, at the request of server GW, while it buffers packets.

Periodic updates support vanished terminals, else might keep paging forever

There is a trade-off paging overheads vs UE battery.

Tracking Areas
**************

To where should the page be sent?

* each UE gets a list of eNBs defining TA
* UE notifies the network if it changes TA

What about trains though?

* Massive synchronised movement between TAs
* For example bearer setup/teardown

Solve by giving out different TA lists (spreads out the load)

Further optimise using movement prediction.

Pooling
*******

How to dimension the capacity?

* 2G, 3G used hierarchical core
* UE in a cell connects to 1 base station (etc.)

Region in EPC has a *pool* of weighted MMEs when enables eNBs to distribute load across MMEs.

More efficient use of statistical multiplexing.
