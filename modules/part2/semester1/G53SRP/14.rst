.. _G53SRP14:

========================================
14 - Software Fault Tolerance Techniques
========================================

Redundancy
==========

All fault tolerance relies on some form of redundancy. For example having more stuff than is absolutely required to make a working system (including hardware and software). If part of the system fails then the *spare* parts an be used instead (or at the same time in the hope that at least one will work) when a failure occurs.

N-Version Programming
=====================

N-version programming is a technique where multiple redundant modules run in parallel in order to calculate the same value. Each provide an answer and the majority answer is taken as the correct answer. This performs "error masking" since if one module breaks the others will still provide the correct answer.

Failure Modes
=============

Hardware failures are different to bugs. For example two transistors (or wires, etc.) are likely to fail randomly and independently. So this is a good idea in hardware.

With software bugs, two copies of the same (buggy) method will do exactly the same things (however consider cosmic radiation modifying bits in memory).

So full software redundancy requires:

* Different languages
* Different compilers
* Different algorithms
* Limited/no sharing between teams (so as not to share incorrect assumptions)

Implementation
==============

Lets imagine we have multiple versions of the same program written in different languages. There needs to be some sort of *driver* which invokes the different versions of the programs, waits for, and then compares the outputs, and then calculates an outcome.

Vote Comparison
===============

A way to create a final output (based upon the multiple outputs from the different software versions) is to compare the outputs. A **comparison vector** would contain the multiple outputs from each version of the program. Comparison points must be consistent amount the different outputs such that they are compared fairly.

There are some problems. Floating point numbers and floating point arithmetic is handled differently in different computer architectures, this could cause inexact voting. This could mean there are sensitive regions where data can be subtly different. This in turn could mean there are multiple correct solutions.

Other Issues
============

There could be problems in the program specification which the different versions of the program are based upon. In addition there could be different ways in which the different version fail, and developing different versions of the same software can become expensive.

Software Dynamic Redundancy
===========================

There are four stages in fault tolerance:

#. Error Detection
#. Damage confinement and assessment
#. Error recovery
#. Fault treatment and continued service

Error Detection
***************

How do we know (in software) that something has gone wrong. There are lots of ways we might detect that something is aerie:

Environmental - or things that the language itself could check:

* Division by zero
* Array bounds

Application - code you write to check for problems:

* Replication checks
* Timing checks
* Reversal checks
    For example to square a number you just square rooted to check you did it correctly.
* Coding checks
* Reasonableness checks
    Checks the answer of an algorithm to ensure that it is plausible.
* Structural Checks
    Check that a linked-list is still correctly linked etc.
* Dynamic reasonableness checks

Damage Confinement and Assessment
*********************************

If nothing is done when an error is detected, that error can spread since the program will assume it to be correct. We need to stop this from happening. This confinement process is also known as firewalling.

There are several techniques:

* Modular Decomposition
    Detect errors before they leave a module, and enter another (loosely-coupled module).

* Atomic actions

Firwalling is also helped by protection mechanisms such as OS or hardware-supported access control.

Error Recovery
**************

Now we now there is a problem. In some situations we can recover from that error:

**Backward Recovery** is a technique which records the state of the program and specific boundaries. At certain points a check is conducted (a recovery point) and we can rollback if necessary. This works well with database transactions.

**Forward Recovery**. In an aeroplane you cannot rollback the state of the planes control surfaces, you have already moved them. In these cases you must calculate a new state based upon the fact that you have made an error.

**Error Masking** uses a fail-over technique in order to mask the error you are getting.

Fault Treatment and Continued Service
*************************************

Now that we have recovered from the error, we might to to resolve the underlying cause of the fault. For example fixing the program bug or replacing the failed part.

This requires monitoring and reporting and should be supported by mechanisms for in-place maintenance.

Example: Recovery blocks
========================

The recovery blocks technique starts with an acceptance test and tries multile algorithms until the test is met. If no algorithm works correctly a failure contingency is implemented.
