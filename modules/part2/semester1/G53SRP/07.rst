.. _G53STP:

=============================
07 - Event-Driven Programming
=============================

Events
======

Events are things which happen, i.e. which have a time or *temporal* extend. For example a key press or message being received over the network etc.

Events occur (effectively or actually) independently from the execution of the program (i.e. at any time).

An **event handler** is a package of code for responding to that event. Typically also a temporal scope.

Event Despatching
=================

Events can be **polled for** explicitly by the **user code**. There is a need to choose a polling frequency to balance idle load with responsiveness.

Event can also be polled for with **OS support**. For example using a UNIX poll or select, to wait for one or more blocking OS events and/or a timeout.

Event-Driven Programs: Common Polling-Based Model
=================================================

*...*

Simple Event-Driven Programming
===============================

For example GUI programming or timed programming or scalable I/O or dataflow etc. In these cases there are distinct initialisation and active phases and there can be explicit representation of events (as objects for example).

Good Practice
=============

It is a good idea to keep event handler execution times short, handing off long-running activities to helper threads.

If you are doing your own event dispatching avoid busy waiting (i.e. intensive polling loops). At the very least put in a (long as possible) sleep or wait before re-checking.

Events and Timers
=================

Events can be caused by the *firing* of timers. Timers can be *one-shot* (fires only once) or repeated (periodically fires at a certain rate).

Standard Java support two lots of timers: ``java.util.Timer.*`` and ``javax.swing.Timer.*``

java.util Timers
================

Events can be caused by timers. A ``java.util.TimerTask`` is a ``Runnable`` object that represents unit of work (e.g. a simulation tick, network update time etc.)

A ``java.util.Timer`` represents a background thread that executres a set of ``TimerTask``s non-concurrently. It enforces order, avoids overhead of multiple threads or thread per task adn cannot directly call swing (see ``javax.swing.SwingUtilities.invokeLater`` and ``javax.swing.SwingUtilities.invokeAndWait)``

javax.swing Timers
==================

There are timers which are integrated with the Swing GUI event dispatch thread, which means its safe to directly manipulate Swing widgets.

A ``java.awt.event.ActionListener`` represents a unit of work (e.g. a GUI redraw or update) and is executed by the standard Swing event handling thread. This thread enforces ordering of timers and also other GUI events, which means a long-running handler will delay **ALL** GUI events and timers!

Other Forms of Event Despatching
================================

Events can be asynchronously notified. This is similar to exception handling where the exception is **not** signalled by the thread or process which handles it. Meaning it is not related to the current thread activity, and may or may not resume.

RTSJ Asynchronous Events
========================

In RTSJ asynchronous events are data-less occurrences. The event carries **no** information (unlike Swing events). ``AsyncEvent`` instances represent the type of event and **not** a particular occurrence of it. ``AsyncEventHandler`` instances can be registered with an ``AsyncEvent`` instance. The handler is **released** when the event fires.

RTSJ Program - Internal Events
==============================

An ``AsyncEvent`` can be explicitly fired by another activity within the application via a method called ``fire()``.

RTSJ POSIXSignalHandler
=======================

This is a class which is required only on POSIX (UNIX) platforms and provides a standards way to register handlers for POSIZ signals (e.g. Ctrl-C).

RTSJ External Events
====================

An ``AsyncEvent`` may be triggered by a low-level system event (such as an interrupt). Each ``AsyncEvent`` is *bound* to the named **happening** using a method called ``bindTo``. A happening is a string which represents something that *happens* externally. The JVM detects/traps the underlying *happening,* and causes the ``AsyncEvent`` to fire.

RTSJ Timer Events
=================

This is comparable to ``java.util.Timer`` and ``java.util.TimerTask``. Realtime ``Timer`` extends ``AsyncEvent`` whereas ``OneShotTimer`` and ``PeriodicTimer`` extend ``Timer`` for on-shot or periodic use.

Threading is handled by a realtime VM or ``BoundAsycEventHandler``. Realtime equivalent of ``TimerTask`` is a regular realtime ``AsyncEventHandler``.